// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

using System.Globalization;
using CodeMechanic.Diagnostics;
using CodeMechanic.Types;
using CsvHelper;
using NSpecifications;

namespace nugsnet6.Models;

public class Part
{
    public string Id { get; set; } = string.Empty;

    // public DateTime createdTime { get; set; }
    public string Name { get; set; } = string.Empty;
    public string Kind { get; set; } = string.Empty;
    public string Type { get; set; } = string.Empty;
    public string Notes { get; set; } = string.Empty;
    public string ProductCode { get; set; } = string.Empty;

    public double Cost { get; set; }

    public string WeightInOz { get; set; }

    // public Attachment[] Attachments { get; set; }
    public string Attachments { get; set; }
    public string Calibers { set; get; }
    public string Builds { set; get; }
    public Uri Url { get; set; }
    public Uri Demo { get; set; }
    public long ComboCost { get; set; }
    public object Combo { get; set; }
    public string CreatedBy { get; set; }
    public DateTimeOffset Created { get; set; }
    public string LastModifiedBy { get; set; }
    public DateTimeOffset LastModified { get; set; }

    public static CodeMechanic.Extensions.Maybe<Part> NotFound = new CodeMechanic.Extensions.Maybe<Part>(new Part()
    {
        Id = string.Empty, Name = "Not Available", Cost = -1, ComboCost = -1
    });

    public static ISpecification<Part> IsValid => new Spec<Part>(part => part.Cost > 0
                                                                         && NotFound.IfSome(_ =>
                                                                             part.Equals(NotFound.Value)));
}
//
// public static class PartCsvExtensions
// {
//     public static Part MapToRecord(this CsvReader csv)
//     {
//         string cost_wo_dollar_sign = csv.GetField("Cost")
//                 .Replace("$", "")
//             // .Dump("after replace")
//             ;
//
//         cost_wo_dollar_sign.Dump("cost field");
//         var record = new Part
//         {
//             Id = csv.GetField<string>("Id"),
//             Name = csv.GetField("Name"),
//             Cost = cost_wo_dollar_sign.ToDouble()
//             // Combo = cost_wo_dollar_sign.ToDouble()
//             // Cost = TypeExtensions.ToDouble(csv.GetField("Cost").ToString())
//         };
//         return record;
//     }
// }